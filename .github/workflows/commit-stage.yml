name: Commit Stage  # 워크플로의 이름
on: push  # 새 코드를 저장소로 푸시하면 워크플로를 시작한다.

jobs:
  build:  # 작업의 고유 식별자
    name: Build and Test
    runs-on: ubuntu-22.04 # 작업이 실행될 머신의 유형
    permissions:  # 작업에 부여된 권한
      contents: read  # 현재 깃 저장소를 체크아웃 할 수 있는 권한
      security-events: write  # 깃허브에 보안 이벤트를 제출할 수 있는 권한
    steps:
      - name: Checkout source code
        uses: action/checkout@v3 # 현재 깃 저장소(Catalog-service)를 체크아웃한다.
      - name: Set up JDK
        uses: actions/setup-java@v3  # 자바 런타임을 설치하고 설정한다.
        with: # 사용할 버전, 유형, 캐쉬유형 정의한다.
          distribution: temurin
          java-version: 17
          cache: gradle
      - name: CodeVulnerability scanning
        uses: anchore/scan-action@v3  # 그라이프를 사용해 취약성을 스캔한다.
        id: scan  # 현재 단계의 식별자를 할당하고 이후의 단계에서 참고할 수 있다.
        with:
          path: "${{ github.workspace }}" # 체크아웃 저장소 경로
          fail-build: false # 보안 취약성 발견 시 빌드 실패 여부
          severity-cutoff: high # 오류로 간주할 최소 수준의 보안 유형(낮음, 중간, 높음, 치명적)
          acs-report-enable: true # 스캔이 완료된 이후에 리포트를 생성할지 여부
      - name: Upload vulnerability report
        uses: github/codeql-action/upload-sarif@v2  # 깃허브로 보안 취약성리포트(SARIF 형식) 전송
        if: success() || failure()  #  이전 단계가 실패하더라도 리포트 전송
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }} # 이전 단계 결과의 리포트를 가져온다.
      - name: Build, unit tests and integration tests
        run: |
          chmod +x gradlew
          ./gradlew build
